# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Nijingzhe
# This file is distributed under the same license as the SimpleLLMFunc
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SimpleLLMFunc \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 17:51+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/detailed_guide/llm_function.md:1
msgid "LLM 函数装饰器"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:3
msgid ""
"本文档介绍 SimpleLLMFunc 库中的核心装饰器 `llm_function`。该装饰器能够将异步 Python "
"函数的执行委托给大语言模型（LLM），开发者只需要定义函数签名（参数和返回类型）并在文档字符串中描述函数的执行策略，LLM "
"就会根据描述自动完成函数的实际执行。"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:5
msgid "llm_function 装饰器"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:7
msgid "装饰器作用"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:9
msgid ""
"`llm_function` 装饰器是 SimpleLLMFunc 库的核心功能之一，它提供了原生异步的 LLM "
"函数调用能力。通过这个装饰器，开发者可以轻松地将异步函数转换为由 LLM 执行的智能函数。"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:11
msgid "主要功能特性"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:12
msgid "**智能参数传递**: 自动将函数参数转换为 LLM 可理解的文本提示"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:13
msgid "**类型安全**: 支持类型提示，自动将 LLM 响应转换为指定的返回类型"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:14
msgid "**工具集成**: 支持为 LLM 提供工具，扩展其能力范围"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:15
msgid "**灵活配置**: 支持自定义提示模板和 LLM 参数"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:16
msgid "**错误处理**: 内置重试机制和详细的日志记录"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:18
msgid "装饰器用法"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:20
msgid ""
"⚠️ **重要说明**：`llm_function` 只能装饰 `async def` "
"定义的异步函数，请确保在示例或实际代码中使用异步函数并在调用时 `await` 该函数。"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:22
msgid "基本语法"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:40
msgid "参数说明"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:42
msgid "**llm_interface** (必需): LLM 接口实例，用于与大语言模型通信"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:43
msgid "**toolkit** (可选): 工具列表，可以是 Tool 对象或被 @tool 装饰的函数"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:44
msgid "**max_tool_calls** (可选): 最大工具调用次数，防止无限循环，默认为 5"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:45
msgid "**system_prompt_template** (可选): 自定义系统提示模板"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:46
msgid "**user_prompt_template** (可选): 自定义用户提示模板"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:47
msgid "****llm_kwargs**: 额外的关键字参数，将直接传递给 LLM 接口（如 temperature、top_p 等）"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:49
msgid "自定义提示模板"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:51
msgid "系统提示模板占位符"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:52
#, python-brace-format
msgid "`{function_description}`: 函数文档字符串内容"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:53
#, python-brace-format
msgid "`{parameters_description}`: 函数参数及其类型的描述"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:54
#, python-brace-format
msgid "`{return_type_description}`: 返回值类型的描述"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:56
msgid "用户提示模板占位符"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:57
#, python-brace-format
msgid "`{parameters}`: 格式化后的参数名称和值"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:59
msgid "动态模板参数"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:61
msgid ""
"SimpleLLMFunc 支持在函数调用时通过 `_template_params` 参数动态设置 DocString "
"模板参数。这个功能让同一个函数可以适应不同的使用场景，大大提高了代码的复用性。"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:63
msgid "使用方法"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:65
msgid "**在 DocString 中使用占位符**："
msgstr ""

#: ../../source/detailed_guide/llm_function.md:73
msgid "**调用时传入模板参数**："
msgstr ""

#: ../../source/detailed_guide/llm_function.md:105
msgid "核心特性"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:107
msgid "**动态角色切换**：同一个函数可以扮演不同的角色"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:108
msgid "**灵活任务适配**：根据调用上下文调整任务类型"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:109
msgid "**透明处理**：`_template_params` 不会传递给 LLM，仅用于模板处理"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:110
msgid "**错误处理**：当模板参数不完整时，系统会发出警告并使用原始 DocString"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:112
msgid "装饰器行为"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:114
msgid "数据流程"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:116
msgid "**函数调用捕获**: 当用户调用被装饰的函数时，装饰器捕获所有实际参数"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:117
msgid "**类型信息提取**: 从函数签名中提取参数类型和返回类型信息"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:118
msgid "**提示构建**:"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:119
msgid "将函数文档字符串作为系统提示的核心"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:120
msgid "将参数信息格式化为用户提示"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:121
msgid "应用自定义模板（如果提供）"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:122
msgid "**LLM 调用**: 发送构建好的提示给 LLM"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:123
msgid "**工具处理**: 如果 LLM 需要使用工具，自动处理工具调用"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:124
msgid "**响应转换**: 将 LLM 的文本响应转换为指定的返回类型"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:125
msgid "**结果返回**: 返回转换后的结果给调用者"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:127
msgid "内置功能"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:129
msgid "类型转换支持"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:130
msgid "基本类型：`str`, `int`, `float`, `bool`"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:131
msgid "容器类型：`List`, `Dict`, `Tuple`"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:132
msgid "Pydantic 模型"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:133
msgid "自定义类型（通过 JSON 序列化）"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:135
msgid "错误处理机制"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:136
msgid "**空响应重试**: 当 LLM 返回空内容时自动重试"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:137
msgid "**异常捕获**: 完整的异常处理和日志记录"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:138
msgid "**类型转换错误**: 优雅处理类型转换失败的情况"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:140
msgid "日志记录"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:141
msgid "详细的执行日志，包括参数、提示内容和响应"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:142
msgid "支持追踪 ID，便于调试复杂的调用链"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:143
msgid "分级日志（调试、信息、警告、错误）"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:145
msgid "示例"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:147
msgid "示例 1: 基本文本处理"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:174
msgid "示例 2: 结构化数据返回"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:202
msgid "示例 3: 使用工具集"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:246
msgid "示例 4: 自定义提示模板"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:303
msgid "示例 5: Pydantic 模型返回"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:342
msgid "示例 6: 动态模板参数"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:344
msgid "这个示例展示了如何使用动态模板参数让同一个函数适应不同的使用场景："
msgstr ""

#: ../../source/detailed_guide/llm_function.md:421
msgid "这个示例展示了动态模板参数的强大功能："
msgstr ""

#: ../../source/detailed_guide/llm_function.md:422
msgid "**一个函数，多种场景**：`analyze_code` 可以用于性能分析、规范检查等不同目的"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:423
msgid "**动态角色切换**：`process_text` 可以扮演编辑、翻译等不同角色"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:424
msgid "**灵活任务适配**：根据调用时的参数动态调整任务类型和输出风格"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:428
msgid ""
"通过这些示例可以看出，`llm_function` 装饰器提供了一种简洁而强大的方式来利用 LLM 的能力，同时保持了 Python "
"代码的类型安全性和可读性。"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:430
msgid "异步使用示例"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:432
msgid "`llm_function` 自身即为原生异步实现。以下示例演示如何在不同场景下使用它："
msgstr ""

#: ../../source/detailed_guide/llm_function.md:434
msgid "示例 1: 基本异步用法"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:460
msgid "示例 2: 并发处理多个请求"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:502
msgid "示例 3: 与其他异步操作配合"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:544
msgid "这些示例展示了如何使用 `llm_function` 在异步环境中构建高并发的 LLM 调用逻辑。"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:546
msgid "最佳实践"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:548
msgid "1. 错误处理"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:559
msgid "2. 超时控制"
msgstr ""

#: ../../source/detailed_guide/llm_function.md:575
msgid "通过这些示例可以看出，`llm_function` 装饰器在异步场景下同样能够提供高性能的 LLM 调用能力，并保持了良好的易用性与功能完整性。"
msgstr ""

