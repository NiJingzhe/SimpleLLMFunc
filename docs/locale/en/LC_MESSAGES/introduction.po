# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Nijingzhe
# This file is distributed under the same license as the SimpleLLMFunc
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SimpleLLMFunc \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-27 17:51+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: en\n"
"Language-Team: en <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/introduction.md:1
msgid "![cover](https://github.com/NiJingzhe/SimpleLLMFunc/blob/master/img/repocover_new.png?raw=true)"
msgstr ""

#: ../../source/introduction.md:1
msgid "cover"
msgstr ""

#: ../../source/introduction.md:3
msgid "项目介绍"
msgstr ""

#: ../../source/introduction.md:5
msgid "SimpleLLMFunc 是什么?"
msgstr ""

#: ../../source/introduction.md:7
msgid ""
"SimpleLLMFunc 是一个轻量级的大语言模型（Large Language Model, LLM）应用开发框架，旨在简化 LLM "
"在应用中的集成过程。本框架的设计理念是“**LLM as Function, Prompt as "
"Code**”，提供类型安全的装饰器，让开发者能以一种自然、直观的方式利用大语言模型的能力。"
msgstr ""

#: ../../source/introduction.md:9
msgid "为什么需要 SimpleLLMFunc?"
msgstr ""

#: ../../source/introduction.md:11
msgid "在开发基于大语言模型的应用时，我们常常面临以下挑战："
msgstr ""

#: ../../source/introduction.md:13
msgid "需要不断编写重复的 API 调用代码"
msgstr ""

#: ../../source/introduction.md:14
msgid "Prompt 作为字符串变量存在于代码中，不够直观"
msgstr ""

#: ../../source/introduction.md:15
msgid "流程编排受到框架约束，缺乏灵活性"
msgstr ""

#: ../../source/introduction.md:16
msgid "调试和监控 LLM 调用过程困难"
msgstr ""

#: ../../source/introduction.md:18
msgid "SimpleLLMFunc 旨在解决这些问题，使得开发者可以："
msgstr ""

#: ../../source/introduction.md:20
msgid ""
"装饰器驱动：提供 `@llm_function`、`@llm_chat` 等装饰器，所有装饰器仅支持异步函数 (`async def`) "
"并原生适配异步调用。"
msgstr ""

#: ../../source/introduction.md:21
msgid "Prompt 即逻辑：Prompt 就是代码，是这个函数的逻辑实现。"
msgstr ""

#: ../../source/introduction.md:22
msgid "类型安全：支持 Python 类型注解和 Pydantic 模型，确保数据结构正确。"
msgstr ""

#: ../../source/introduction.md:23
msgid "多模态支持：支持文本、图片 URL 和本地图片路径的混合输入，创新性地支持工具的多模态返回。"
msgstr ""

#: ../../source/introduction.md:24
msgid "通用模型接口：兼容任何符合 OpenAI API 格式的模型服务，易于扩展。"
msgstr ""

#: ../../source/introduction.md:25
msgid "API 密钥管理：智能负载均衡多个 API 密钥。"
msgstr ""

#: ../../source/introduction.md:26
msgid "流量控制：集成令牌桶算法，实现智能流量平滑。"
msgstr ""

#: ../../source/introduction.md:27
msgid "工具系统：支持 LLM 工具使用，具有简单易用的工具定义和调用机制，支持多模态工具返回。"
msgstr ""

#: ../../source/introduction.md:28
msgid "日志完备：支持 trace_id 跟踪和搜索，方便调试和监控。"
msgstr ""

#: ../../source/introduction.md
msgid "特性"
msgstr ""

#: ../../source/introduction.md
msgid "SimpleLLMFunc"
msgstr ""

#: ../../source/introduction.md
msgid "LangChain"
msgstr ""

#: ../../source/introduction.md
msgid "Dify"
msgstr ""

#: ../../source/introduction.md
msgid "易用性（学习曲线）"
msgstr ""

#: ../../source/introduction.md
msgid "✅"
msgstr ""

#: ../../source/introduction.md
msgid "❌"
msgstr ""

#: ../../source/introduction.md
msgid "直观性"
msgstr ""

#: ../../source/introduction.md
msgid "⭕️"
msgstr ""

#: ../../source/introduction.md
msgid "灵活性"
msgstr ""

#: ../../source/introduction.md
msgid "开发速度"
msgstr ""

#: ../../source/introduction.md
msgid "调试性"
msgstr ""

#: ../../source/introduction.md
msgid "异步支持"
msgstr ""

#: ../../source/introduction.md
msgid "多模态支持"
msgstr ""

#: ../../source/introduction.md
msgid "流量控制"
msgstr ""

#: ../../source/introduction.md
msgid "类型安全"
msgstr ""

#: ../../source/introduction.md
msgid "工具集成"
msgstr ""

#: ../../source/introduction.md
msgid "✅🌟"
msgstr ""

#: ../../source/introduction.md
msgid "社区与生态系统"
msgstr ""

#: ../../source/introduction.md:44
msgid "样例展示"
msgstr ""

#: ../../source/introduction.md:46
msgid "下面是一个简单的示例，展示了 SimpleLLMFunc 的基本用法："
msgstr ""

#: ../../source/introduction.md:48
msgid ""
"⚠️ SimpleLLMFunc 中的 `@llm_function`、`@llm_chat`、`@tool` 等装饰器只能装饰 `async "
"def` 定义的函数，请在异步上下文中通过 `await` 调用。"
msgstr ""

#: ../../source/introduction.md:95
msgid "异步支持示例"
msgstr ""

#: ../../source/introduction.md:126
msgid "多模态支持示例"
msgstr ""

#: ../../source/introduction.md:160
msgid "动态模板参数示例"
msgstr ""

#: ../../source/introduction.md:226
msgid "核心特性"
msgstr ""

#: ../../source/introduction.md:228
msgid "**装饰器驱动**: 使用 `@llm_function`、`@llm_chat` 构建 LLM 驱动的功能，均为原生异步实现。"
msgstr ""

#: ../../source/introduction.md:229
msgid "**DocString 即 Prompt**: 直接在函数文档中定义 Prompt，提高代码可读性。"
msgstr ""

#: ../../source/introduction.md:230
msgid "**动态模板参数**: 支持通过 `_template_params` 在函数调用时动态设置 DocString 模板参数，让一个函数适应多种场景。"
msgstr ""

#: ../../source/introduction.md:231
msgid "**类型安全**: 支持 Python 类型注解和 Pydantic 模型，确保数据结构正确。"
msgstr ""

#: ../../source/introduction.md:232
msgid "**异步支持**: `@llm_function` 与 `@llm_chat` 原生支持异步调用，无需额外别名。"
msgstr ""

#: ../../source/introduction.md:233
msgid "**多模态支持**: 支持文本、图片URL和本地图片路径的多模态输入处理，同时创新性支持工具的多模态返回。"
msgstr ""

#: ../../source/introduction.md:234
msgid "**通用模型接口**: 兼容任何符合 OpenAI API 格式的模型服务，并且定义了 LLM Interface 抽象类，便于扩展。"
msgstr ""

#: ../../source/introduction.md:235
msgid "**API 密钥管理**: 智能负载均衡多个 API 密钥。"
msgstr ""

#: ../../source/introduction.md:236
msgid "**流量控制**: 集成令牌桶算法，实现智能流量平滑。"
msgstr ""

#: ../../source/introduction.md:237
msgid "**工具系统**: 支持 LLM tool use，具有简单易用的工具定义和调用机制，支持多模态工具返回。"
msgstr ""

#: ../../source/introduction.md:238
msgid "**日志完备**: 支持 `trace_id` 跟踪和搜索，方便调试和监控。"
msgstr ""

#: ../../source/introduction.md:240
msgid "项目架构"
msgstr ""

#: ../../source/introduction.md:242
msgid "SimpleLLMFunc 的目录结构如下："
msgstr ""

#: ../../source/introduction.md:290
msgid "模块介绍"
msgstr ""

#: ../../source/introduction.md:292
msgid "LLM 接口模块"
msgstr ""

#: ../../source/introduction.md:294
msgid ""
"`interface` 模块提供了与各种 LLM 服务通信的标准接口。它支持任何符合 OpenAI API 格式的服务，包括 OpenAI "
"自身、Azure OpenAI、各种开源模型的兼容 API 等。新增的 `token_bucket.py` "
"提供了流量控制功能，防止API调用频率过高。"
msgstr ""

#: ../../source/introduction.md:296
msgid "LLM 装饰器模块"
msgstr ""

#: ../../source/introduction.md:298
msgid "`llm_decorator` 模块是框架的核心，提供了四种主要装饰器："
msgstr ""

#: ../../source/introduction.md:300
msgid "`@llm_function`: 用于创建无状态的 LLM 功能，适合单次查询和转换任务"
msgstr ""

#: ../../source/introduction.md:301
msgid "`@llm_chat`: 用于创建对话式 LLM 功能，支持历史记录管理和多轮交互"
msgstr ""

#: ../../source/introduction.md:304
msgid ""
"该模块还包含 `multimodal_types.py`，定义了 `Text`、`ImgUrl`、`ImgPath` "
"等多模态类型，支持处理文本和图像的混合输入。"
msgstr ""

#: ../../source/introduction.md:306
msgid "类型定义模块"
msgstr ""

#: ../../source/introduction.md:308
msgid "`type` 模块专门用于导出多模态类型定义，使开发者可以方便地使用类型标注来创建支持多模态输入的 LLM 函数。"
msgstr ""

#: ../../source/introduction.md:310
msgid "日志系统"
msgstr ""

#: ../../source/introduction.md:312
msgid ""
"`logger` 模块提供了全面的日志记录功能，包括 trace_id 跟踪、token "
"使用统计、系统和用户提示的记录等。特别地，日志系统会自动记录所有 LLM 的输入输出对话，生成结构化的 trace "
"索引文件以按照函数调用归类日志，开发者可以直接从这些日志中快速整理出高质量的对话语料，用于后续的模型微调和优化。"
msgstr ""

#: ../../source/introduction.md:314
msgid "工具系统"
msgstr ""

#: ../../source/introduction.md:316
msgid ""
"`tool` 模块允许 LLM 访问外部工具和服务，增强其解决问题的能力。工具可以是任何 Python 函数，通过 `@tool` "
"装饰器进行标记。该模块现在支持多模态工具返回，工具可以返回图片、文本或其组合。"
msgstr ""

#: ../../source/introduction.md:318
msgid "适用人群"
msgstr ""

#: ../../source/introduction.md:320
msgid "SimpleLLMFunc 特别适合以下朋友："
msgstr ""

#: ../../source/introduction.md:322
msgid "**LLM应用开发的入门创客玩家**: 学习曲线平缓，内容简单，快速上手，直观易懂。"
msgstr ""

#: ../../source/introduction.md:323
msgid "**快速原型开发的创业者**: 需要快速验证 LLM 应用想法，缩短开发周期和迭代时间。"
msgstr ""

#: ../../source/introduction.md:324
msgid "**会Python的PM**: 需要快速实现 LLM 应用原型，验证产品想法。"
msgstr ""

#: ../../source/introduction.md:326
msgid "当然我们也欢迎任何一位对 LLM 应用开发感兴趣的小白，老手或者专家加入我们的社区，一起探索 LLM 应用的无限可能！"
msgstr ""

